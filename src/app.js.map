{"version":3,"file":"app.js","mappings":"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","sources":["webpack://phaser-3-vsc-typescript-nodejs/./src/ts/Entity/Entity.ts","webpack://phaser-3-vsc-typescript-nodejs/./src/ts/Game.ts","webpack://phaser-3-vsc-typescript-nodejs/./src/ts/Scenes/Boot.ts","webpack://phaser-3-vsc-typescript-nodejs/./src/ts/Scenes/MainGame.ts","webpack://phaser-3-vsc-typescript-nodejs/./src/ts/Scenes/MainMenu.ts","webpack://phaser-3-vsc-typescript-nodejs/./src/ts/Scenes/MainSettings.ts","webpack://phaser-3-vsc-typescript-nodejs/./src/ts/Scenes/Preloader.ts","webpack://phaser-3-vsc-typescript-nodejs/./src/ts/Scenes/SplashScreen.ts","webpack://phaser-3-vsc-typescript-nodejs/./src/ts/Utilities.ts","webpack://phaser-3-vsc-typescript-nodejs/external var \"Phaser\"","webpack://phaser-3-vsc-typescript-nodejs/webpack/bootstrap","webpack://phaser-3-vsc-typescript-nodejs/webpack/startup"],"sourcesContent":["export default class Entity {\r\n\r\n    public sprite : Phaser.Physics.Arcade.Sprite;\r\n    public collider : Phaser.Physics.Arcade.Sprite;\r\n\r\n    constructor(scene: Phaser.Scene, x: number, y: number, texture: string, frame?: string | number){\r\n        this.sprite = scene.physics.add.sprite(x, y, \"\");\r\n        \r\n        var randX = Phaser.Math.FloatBetween(0, 1) * 150;\r\n\t\tvar randY = Phaser.Math.FloatBetween(0, 1) * 150;\r\n\t\t\r\n\t\tthis.sprite.setVelocity(randX, randY);\r\n\t\tthis.sprite.setBounce(1, 1);\r\n\t\tthis.sprite.setCollideWorldBounds(true);\r\n        \r\n        this.collider = scene.physics.add.staticSprite(100, 100, texture, frame);\r\n        this.collider.displayWidth=500;\r\n        this.collider.disableBody(true);\r\n        var randX = Phaser.Math.FloatBetween(0, 1) * 150;\r\n\t\tvar randY = Phaser.Math.FloatBetween(0, 1) * 150;\r\n\t\t\r\n\t\t// this.collider.setVelocity(randX, randY);\r\n\t\t// this.collider.setBounce(1, 1);\r\n\t\t// this.collider.setCollideWorldBounds(true);\r\n    }\r\n}\r\n","import 'phaser';\r\nimport Boot from \"./Scenes/Boot\";\r\nimport Preloader from \"./Scenes/Preloader\";\r\nimport MainMenu from \"./Scenes/MainMenu\";\r\nimport SplashScreen from \"./Scenes/SplashScreen\";\r\nimport Utilities from \"./Utilities\";\r\nimport MainGame from \"./Scenes/MainGame\";\r\nimport MainSettings from \"./Scenes/MainSettings\";\r\n\r\nconst gameConfig: Phaser.Types.Core.GameConfig = {\r\n\twidth: 800,\r\n\theight: 600,\r\n\ttype: Phaser.AUTO,\r\n\tphysics:{\r\n\t\tdefault: \"arcade\",\r\n\t\tarcade:{\r\n\t\t\tgravity: { y: 200 }, \r\n\t\t\tdebug:true, debugShowBody: true, debugBodyColor: 0xffffff,\r\n\t\t}\r\n\t},\r\n\tparent: \"content\",\r\n\ttitle: \"Starter Project for Phaser 3 with Visual Studio Code, TypeScript, and NodeJS\"\r\n};\r\n\r\nexport default class Game extends Phaser.Game {\r\n\tconstructor(config: Phaser.Types.Core.GameConfig) {\r\n\t\tUtilities.LogSceneMethodEntry(\"Game\", \"constructor\");\r\n\r\n\t\tsuper(config);\r\n\r\n\t\tthis.scene.add(Boot.Name, Boot);\r\n\t\tthis.scene.add(Preloader.Name, Preloader);\r\n\t\tthis.scene.add(SplashScreen.Name, SplashScreen);\r\n\t\tthis.scene.add(MainMenu.Name, MainMenu);\r\n\t\tthis.scene.add(MainGame.Name, MainGame);\r\n\t\tthis.scene.add(MainSettings.Name, MainSettings);\r\n\t\tthis.scene.start(Boot.Name);\r\n\t}\r\n}\r\n\r\n/**\r\n * Workaround for inability to scale in Phaser 3.\r\n * From http://www.emanueleferonato.com/2018/02/16/how-to-scale-your-html5-games-if-your-framework-does-not-feature-a-scale-manager-or-if-you-do-not-use-any-framework/\r\n */\r\nfunction resize(): void {\r\n\tconst canvas = document.querySelector(\"canvas\");\r\n\tconst width = window.innerWidth;\r\n\tconst height = window.innerHeight;\r\n\tconst wratio = width / height;\r\n\tconst ratio = Number(gameConfig.width) / Number(gameConfig.height);\r\n\tif (wratio < ratio) {\r\n\t\tcanvas.style.width = width + \"px\";\r\n\t\tcanvas.style.height = (width / ratio) + \"px\";\r\n\t} else {\r\n\t\tcanvas.style.width = (height * ratio) + \"px\";\r\n\t\tcanvas.style.height = height + \"px\";\r\n\t}\r\n}\r\n\r\nwindow.onload = (): void => {\r\n\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n\tconst game = new Game(gameConfig);\r\n\t// Uncomment the following two lines if you want the game to scale to fill the entire page, but keep the game ratio.\r\n\t//resize();\r\n\t//window.addEventListener(\"resize\", resize, true);\r\n};\r\n","import Preloader from \"./Preloader\";\r\nimport Utilities from \"../Utilities\";\r\n\r\nexport default class Boot extends Phaser.Scene {\r\n\t/**\r\n\t * Unique name of the scene.\r\n\t */\r\n\tpublic static Name = \"Boot\";\r\n\r\n\tpublic preload(): void {\r\n\t\t// Preload as needed.\r\n\t}\r\n\r\n\tpublic create(): void {\r\n\t\tUtilities.LogSceneMethodEntry(\"Boot\", \"create\");\r\n\r\n\t\tthis.scene.start(Preloader.Name);\r\n\t}\r\n}\r\n","import Entity from \"../Entity/Entity\";\r\nimport Utilities from \"../Utilities\";\r\n\r\nexport default class MainGame extends Phaser.Scene {\r\n\t/**\r\n\t * Unique name of the scene.\r\n\t */\r\n\tpublic static Name = \"MainGame\";\r\n\r\n\tpublic preload(): void {\r\n\t\t// Preload as needed.\r\n\r\n\t\t\r\n\t}\r\n\r\n\tpublic create(): void {\r\n\t\tUtilities.LogSceneMethodEntry(\"MainGame\", \"create\");\r\n\r\n\t\tthis.add.image(this.cameras.main.centerX, this.cameras.main.centerY, \"Phaser-Logo-Small\");\r\n\r\n\t\tlet entity1 = new Entity(this, 0, 0, \"megaman\");\r\n\t\t\r\n\t\tlet logo = this.physics.add.sprite(300, 200, \"megaman\");\r\n\r\n\t\tvar randX = Phaser.Math.FloatBetween(0, 1) * 1150;\r\n\t\tvar randY = Phaser.Math.FloatBetween(0, 1) * 1150;\r\n\t\t\r\n\t\tlogo.setVelocity(randX, randY);\r\n\t\tlogo.setBounce(1, 1);\r\n\t\tlogo.setCollideWorldBounds(true);\r\n\t}\r\n}\r\n","import Utilities from \"../Utilities\";\r\nimport MainGame from \"./MainGame\";\r\nimport MainSettings from \"./MainSettings\";\r\n\r\nexport default class MainMenu extends Phaser.Scene {\r\n\t/**\r\n\t * Unique name of the scene.\r\n\t */\r\n\tpublic static Name = \"MainMenu\";\r\n\r\n\tpublic preload(): void {\r\n\t\t// Preload as needed.\r\n\t}\r\n\r\n\tpublic create(): void {\r\n\t\tUtilities.LogSceneMethodEntry(\"MainMenu\", \"create\");\r\n\r\n\t\tconst titleText = this.add.text(this.cameras.main.centerX, 30, \"MetalSlugX3\");\r\n\t\ttitleText\r\n\t\t\t.setFontFamily(\"monospace\")\r\n\t\t\t.setFontSize(75)\r\n\t\t\t.setFill(\"#fff\")\r\n\t\t\t.setAlign(\"center\")\r\n\t\t\t.setOrigin(0.5);\r\n\r\n\t\tconst textYPosition = this.cameras.main.height / 3;\r\n\r\n\t\tconst newGameText = this.add.text(this.cameras.main.centerX, textYPosition, \"Start\");\r\n\t\tnewGameText\r\n\t\t\t.setFontFamily(\"monospace\")\r\n\t\t\t.setFontSize(40)\r\n\t\t\t.setFill(\"#fff\")\r\n\t\t\t.setAlign(\"center\")\r\n\t\t\t.setOrigin(0.5);\r\n\t\tnewGameText.setInteractive();\r\n\t\tnewGameText.on(\"pointerdown\", () => { this.scene.start(MainGame.Name); }, this);\r\n\r\n\t\tconst settingsText = this.add.text(this.cameras.main.centerX, textYPosition * 2, \"Settings\");\r\n\t\tsettingsText.setOrigin(0.5);\r\n\t\tsettingsText.setFontFamily(\"monospace\").setFontSize(30).setFill(\"#fff\");\r\n\t\tsettingsText.setInteractive();\r\n\t\tsettingsText.on(\"pointerdown\", () => { this.scene.start(MainSettings.Name); }, this);\r\n\r\n\t\t// TODO: Remove this later.\r\n\t\tthis.scene.start(MainGame.Name);\r\n\t}\r\n\r\n\tpublic update(): void {\r\n\t\t// Update logic, as needed.\r\n\t}\r\n}\r\n","import Utilities from \"../Utilities\";\r\nimport MainMenu from \"./MainMenu\";\r\n\r\nexport default class MainSettings extends Phaser.Scene {\r\n\t/**\r\n\t * Unique name of the scene.\r\n\t */\r\n\tpublic static Name = \"MainSettings\";\r\n\r\n\tpublic create(): void {\r\n\t\tUtilities.LogSceneMethodEntry(\"MainSettings\", \"create\");\r\n\t\tconst startYPosition = this.cameras.main.height / 4;\r\n\t\tconst fontSize = 25;\r\n\r\n\t\t// Add a button to return to the main menu.\r\n\t\tconst backText = this.add.text(this.cameras.main.centerX, startYPosition * 2, \"Go Back\");\r\n\t\tbackText\r\n\t\t\t.setOrigin(0.5)\r\n\t\t\t.setFontFamily(\"monospace\").setFontSize(fontSize).setFill(\"#fff\")\r\n\t\t\t.setInteractive();\r\n\t\tbackText.on(\"pointerdown\", () => { this.scene.start(MainMenu.Name); }, this);\r\n\t}\r\n}\r\n","import SplashScreen from \"./SplashScreen\";\r\nimport Utilities from \"../Utilities\";\r\n\r\nexport default class Preloader extends Phaser.Scene {\r\n\t/**\r\n\t * Unique name of the scene.\r\n\t */\r\n\tpublic static Name = \"Preloader\";\r\n\r\n\tpublic preload(): void {\r\n\t\tthis.addProgressBar();\r\n\r\n\t\tthis.load.path = \"assets/\";\r\n\t\tthis.load.image(\"phaser_pixel_medium_flat\");\r\n\t\tthis.load.image(\"Phaser-Logo-Small\");\r\n\t\tthis.load.image(\"megaman\", \"megaman.png\")\r\n\r\n\t\t// You should remove this logic; this is only included here to show off the progress bar.\r\n\t\t// for (let i = 0; i < 100; i++) {\r\n\t\t// \tthis.load.image(\"Phaser-Logo-Small\" + i, \"Phaser-Logo-Small.png\");\r\n\t\t// }\r\n\t}\r\n\r\n\tpublic create(): void {\r\n\t\tUtilities.LogSceneMethodEntry(\"Preloader\", \"create\");\r\n\r\n\t\tthis.scene.start(SplashScreen.Name);\r\n\t}\r\n\r\n\tpublic update(): void {\r\n\t\t// preload handles updates to the progress bar, so nothing should be needed here.\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a progress bar to the display, showing the percentage of assets loaded and their name.\r\n\t */\r\n\tprivate addProgressBar(): void {\r\n\t\tconst width = this.cameras.main.width;\r\n\t\tconst height = this.cameras.main.height;\r\n\t\t/** Customizable. This text color will be used around the progress bar. */\r\n\t\tconst outerTextColor = '#ffffff';\r\n\r\n\t\tconst progressBar = this.add.graphics();\r\n\t\tconst progressBox = this.add.graphics();\r\n\t\tprogressBox.fillStyle(0x222222, 0.8);\r\n\t\tprogressBox.fillRect(width / 4, height / 2 - 30, width / 2, 50);\r\n\r\n\t\tconst loadingText = this.make.text({\r\n\t\t\tx: width / 2,\r\n\t\t\ty: height / 2 - 50,\r\n\t\t\ttext: \"Loading...\",\r\n\t\t\tstyle: {\r\n\t\t\t\tfont: \"20px monospace\",\r\n\t\t\t\tcolor: outerTextColor\r\n\t\t\t}\r\n\t\t});\r\n\t\tloadingText.setOrigin(0.5, 0.5);\r\n\r\n\t\tconst percentText = this.make.text({\r\n\t\t\tx: width / 2,\r\n\t\t\ty: height / 2 - 5,\r\n\t\t\ttext: \"0%\",\r\n\t\t\tstyle: {\r\n\t\t\t\tfont: \"18px monospace\",\r\n\t\t\t\tcolor: \"#ffffff\"\r\n\t\t\t}\r\n\t\t});\r\n\t\tpercentText.setOrigin(0.5, 0.5);\r\n\r\n\t\tconst assetText = this.make.text({\r\n\t\t\tx: width / 2,\r\n\t\t\ty: height / 2 + 50,\r\n\t\t\ttext: \"\",\r\n\t\t\tstyle: {\r\n\t\t\t\tfont: \"18px monospace\",\r\n\t\t\t\tcolor: outerTextColor\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tassetText.setOrigin(0.5, 0.5);\r\n\r\n\t\tthis.load.on(\"progress\", (value: number) => {\r\n\t\t\tpercentText.setText(parseInt(value * 100 + \"\", 10) + \"%\");\r\n\t\t\tprogressBar.clear();\r\n\t\t\tprogressBar.fillStyle(0xffffff, 1);\r\n\t\t\tprogressBar.fillRect((width / 4) + 10, (height / 2) - 30 + 10, (width / 2 - 10 - 10) * value, 30);\r\n\t\t});\r\n\r\n\t\tthis.load.on(\"fileprogress\", (file: Phaser.Loader.File) => {\r\n\t\t\tassetText.setText(\"Loading asset: \" + file.key);\r\n\t\t});\r\n\r\n\t\tthis.load.on(\"complete\", () => {\r\n\t\t\tprogressBar.destroy();\r\n\t\t\tprogressBox.destroy();\r\n\t\t\tloadingText.destroy();\r\n\t\t\tpercentText.destroy();\r\n\t\t\tassetText.destroy();\r\n\t\t});\r\n\t}\r\n}\r\n","import Utilities from \"../Utilities\";\r\nimport MainMenu from \"./MainMenu\";\r\n\r\nexport default class SplashScreen extends Phaser.Scene {\r\n\t/**\r\n\t * Unique name of the scene.\r\n\t */\r\n\tpublic static Name = \"SplashScreen\";\r\n\r\n\tpublic preload(): void {\r\n\t\tthis.load.path = \"assets/\";\r\n\t}\r\n\r\n\tpublic create(): void {\r\n\t\tUtilities.LogSceneMethodEntry(\"SplashScreen\", \"create\");\r\n\r\n\t\tconst titleText = this.add.text(this.cameras.main.centerX, this.cameras.main.centerY * 0.5, \"Starter Project for Phaser 3 with TypeScript\")\r\n\t\t\t.setOrigin(0.5, 0)\r\n\t\t\t.setFontFamily(\"monospace\").setFontSize(26).setFill(\"#fff\");\r\n\r\n\t\tconst poweredByText = this.add.text(this.cameras.main.centerX, this.cameras.main.centerY - 25, \"Powered By\");\r\n\t\tpoweredByText.setOrigin(0.5, 0.5);\r\n\t\tpoweredByText.setFontFamily(\"monospace\").setFontSize(20).setFill(\"#fff\");\r\n\t\tthis.add.image(this.cameras.main.centerX, this.cameras.main.centerY, \"phaser_pixel_medium_flat\");\r\n\r\n\t\tthis.input.setDefaultCursor(\"pointer\");\r\n\t\tthis.input.on(\"pointerdown\", this.loadMainMenu, this);\r\n\r\n\t\tthis.time.addEvent({\r\n\t\t\t// Run after three seconds.\r\n\t\t\tdelay: 0,\r\n\t\t\tcallback: this.loadMainMenu,\r\n\t\t\tcallbackScope: this,\r\n\t\t\tloop: false\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Load the next scene, the main menu.\r\n\t */\r\n\tprivate loadMainMenu(): void {\r\n\t\tthis.scene.start(MainMenu.Name);\r\n\t}\r\n}\r\n","export default class Utilities {\r\n\t/**\r\n\t * Logs a particular message to the console.\r\n\t * @param message Message to log.\r\n\t */\r\n\tpublic static Log(message: string): void {\r\n\t\tconsole.log((new Date()).toISOString() + \" : \" + message);\r\n\t}\r\n\r\n\t/**\r\n\t * Logs the start of a method in a scene.\r\n\t * @param sceneName Name of the scene.\r\n\t * @param method Method called within the scene.\r\n\t */\r\n\tpublic static LogSceneMethodEntry(sceneName: string, method: string): void {\r\n\t\tthis.Log(\"Entered \" + sceneName + \" \" + method + \"()\");\r\n\t}\r\n}\r\n","module.exports = Phaser;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(862);\n"],"names":["constructor","scene","x","y","texture","frame","this","sprite","physics","add","randX","Phaser","Math","FloatBetween","randY","setVelocity","setBounce","setCollideWorldBounds","collider","staticSprite","displayWidth","disableBody","gameConfig","width","height","type","AUTO","default","arcade","gravity","debug","debugShowBody","debugBodyColor","parent","title","Game","config","LogSceneMethodEntry","super","Name","start","window","onload","Boot","Scene","preload","create","MainGame","image","cameras","main","centerX","centerY","logo","MainMenu","text","setFontFamily","setFontSize","setFill","setAlign","setOrigin","textYPosition","newGameText","setInteractive","on","settingsText","update","MainSettings","startYPosition","backText","Preloader","addProgressBar","load","path","outerTextColor","progressBar","graphics","progressBox","fillStyle","fillRect","loadingText","make","style","font","color","percentText","assetText","value","setText","parseInt","clear","file","key","destroy","SplashScreen","poweredByText","input","setDefaultCursor","loadMainMenu","time","addEvent","delay","callback","callbackScope","loop","static","message","console","log","Date","toISOString","sceneName","method","Log","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}